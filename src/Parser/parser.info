-----------------------------------------------------------------------------
Info file generated by Happy Version 2.0.2 from src/Parser/parser.y
-----------------------------------------------------------------------------

state 68 contains 1 shift/reduce conflicts.
state 87 contains 1 shift/reduce conflicts.
state 88 contains 1 shift/reduce conflicts.
state 89 contains 1 shift/reduce conflicts.
state 90 contains 1 shift/reduce conflicts.
state 91 contains 1 shift/reduce conflicts.
state 92 contains 12 shift/reduce conflicts.
state 93 contains 1 shift/reduce conflicts.
state 94 contains 1 shift/reduce conflicts.
state 95 contains 1 shift/reduce conflicts.
state 96 contains 1 shift/reduce conflicts.
state 97 contains 1 shift/reduce conflicts.
state 98 contains 1 shift/reduce conflicts.
state 122 contains 1 shift/reduce conflicts.

rule 25 is unused

terminal '::' is unused
terminal match is unused
terminal with is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseMiniML -> decs                         (0)
	name -> identifier                                 (1)
	type -> name                                       (2)
	type -> '(' ')'                                    (3)
	type -> '(' type ')'                               (4)
	type -> '[' type ']'                               (5)
	type -> type '->' type                             (6)
	typeAnnotation -> ':' type                         (7)
	dec -> let name many__pat__ optional__typeAnnotation__ '=' exp   (8)
	decs -> many__dec__                                (9)
	exp -> expapp                                      (10)
	exp -> expcond                                     (11)
	exp -> '-' exp                                     (12)
	exp -> exp '+' exp                                 (13)
	exp -> exp '-' exp                                 (14)
	exp -> exp '*' exp                                 (15)
	exp -> exp '/' exp                                 (16)
	exp -> exp '=' exp                                 (17)
	exp -> exp '!=' exp                                (18)
	exp -> exp '<' exp                                 (19)
	exp -> exp '<=' exp                                (20)
	exp -> exp '>' exp                                 (21)
	exp -> exp '>=' exp                                (22)
	exp -> exp '&&' exp                                (23)
	exp -> exp '||' exp                                (24)
	case -> '||' pat '->' exp                          (25)
	expapp -> expapp projatom                          (26)
	expapp -> projatom                                 (27)
	expcond -> if exp then exp                         (28)
	expcond -> if exp then exp else exp                (29)
	projatom -> atom many__projection__                (30)
	atom -> number                                     (31)
	atom -> name                                       (32)
	atom -> string                                     (33)
	atom -> '(' ')'                                    (34)
	atom -> '[' sepBy__exp__','__ ']'                  (35)
	atom -> '(' exp ')'                                (36)
	atom -> '(' '+' ')'                                (37)
	atom -> '(' '-' ')'                                (38)
	atom -> '(' '*' ')'                                (39)
	atom -> '(' '/' ')'                                (40)
	atom -> '(' '=' ')'                                (41)
	atom -> '(' '!=' ')'                               (42)
	atom -> '(' '<' ')'                                (43)
	atom -> '(' '<=' ')'                               (44)
	atom -> '(' '>' ')'                                (45)
	atom -> '(' '>=' ')'                               (46)
	atom -> '(' '&&' ')'                               (47)
	atom -> '(' '||' ')'                               (48)
	pat -> number                                      (49)
	pat -> name                                        (50)
	pat -> string                                      (51)
	pat -> '(' ')'                                     (52)
	pat -> '(' pat ')'                                 (53)
	pat -> '(' pat typeAnnotation ')'                  (54)
	pat -> '[' sepBy__pat__','__ ']'                   (55)
	projection -> '.' '(' exp ')'                      (56)
	many__dec__ -> many_rev__dec__                     (57)
	many__pat__ -> many_rev__pat__                     (58)
	many__projection__ -> many_rev__projection__       (59)
	optional__typeAnnotation__ ->                      (60)
	optional__typeAnnotation__ -> typeAnnotation       (61)
	sepBy__exp__','__ -> sepBy_rev__exp__','__         (62)
	sepBy__pat__','__ -> sepBy_rev__pat__','__         (63)
	many_rev__dec__ ->                                 (64)
	many_rev__dec__ -> many_rev__dec__ dec             (65)
	many_rev__pat__ ->                                 (66)
	many_rev__pat__ -> many_rev__pat__ pat             (67)
	many_rev__projection__ ->                          (68)
	many_rev__projection__ -> many_rev__projection__ projection   (69)
	sepBy_rev__exp__','__ ->                           (70)
	sepBy_rev__exp__','__ -> sepBy_rev__exp__','__ ',' exp   (71)
	sepBy_rev__pat__','__ ->                           (72)
	sepBy_rev__pat__','__ -> sepBy_rev__pat__','__ ',' pat   (73)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	identifier     { L.RangedToken (L.Identifier _) _ }
	string         { L.RangedToken (L.String _) _ }
	number         { L.RangedToken (L.Number _) _ }
	let            { L.RangedToken L.Let _ }
	if             { L.RangedToken L.If _ }
	then           { L.RangedToken L.Then _ }
	else           { L.RangedToken L.Else _ }
	'+'            { L.RangedToken L.Plus _ }
	'-'            { L.RangedToken L.Minus _ }
	'*'            { L.RangedToken L.Times _ }
	'/'            { L.RangedToken L.Divide _ }
	'='            { L.RangedToken L.Eq _ }
	'!='           { L.RangedToken L.Neq _ }
	'<'            { L.RangedToken L.Lt _ }
	'<='           { L.RangedToken L.Le _ }
	'>'            { L.RangedToken L.Gt _ }
	'>='           { L.RangedToken L.Ge _ }
	'&&'           { L.RangedToken L.And _ }
	'||'           { L.RangedToken L.Or _ }
	'('            { L.RangedToken L.LPar _ }
	')'            { L.RangedToken L.RPar _ }
	'['            { L.RangedToken L.LBrack _ }
	']'            { L.RangedToken L.RBrack _ }
	','            { L.RangedToken L.Comma _ }
	':'            { L.RangedToken L.Colon _ }
	'::'           { L.RangedToken L.DoubleColon _ }
	'->'           { L.RangedToken L.Arrow _ }
	'.'            { L.RangedToken L.Dot _ }
	match          { L.RangedToken L.Match _ }
	with           { L.RangedToken L.With _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseMiniML rule  0
	name            rule  1
	type            rules 2, 3, 4, 5, 6
	typeAnnotation  rule  7
	dec             rule  8
	decs            rule  9
	exp             rules 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24
	case            rule  25
	expapp          rules 26, 27
	expcond         rules 28, 29
	projatom        rule  30
	atom            rules 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48
	pat             rules 49, 50, 51, 52, 53, 54, 55
	projection      rule  56
	many__dec__     rule  57
	many__pat__     rule  58
	many__projection__ rule  59
	optional__typeAnnotation__ rules 60, 61
	sepBy__exp__','__ rule  62
	sepBy__pat__','__ rule  63
	many_rev__dec__ rules 64, 65
	many_rev__pat__ rules 66, 67
	many_rev__projection__ rules 68, 69
	sepBy_rev__exp__','__ rules 70, 71
	sepBy_rev__pat__','__ rules 72, 73

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parseMiniML -> . decs                        (rule 0)

	let            reduce using rule 64
	%eof           reduce using rule 64

	decs           goto state 3
	many__dec__    goto state 4
	many_rev__dec__goto state 5

State 1

	name -> . identifier                                (rule 1)

	identifier     shift, and enter state 2


State 2

	name -> identifier .                                (rule 1)

	identifier     reduce using rule 1
	string         reduce using rule 1
	number         reduce using rule 1
	let            reduce using rule 1
	then           reduce using rule 1
	else           reduce using rule 1
	'+'            reduce using rule 1
	'-'            reduce using rule 1
	'*'            reduce using rule 1
	'/'            reduce using rule 1
	'='            reduce using rule 1
	'!='           reduce using rule 1
	'<'            reduce using rule 1
	'<='           reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	'&&'           reduce using rule 1
	'||'           reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	'['            reduce using rule 1
	']'            reduce using rule 1
	','            reduce using rule 1
	':'            reduce using rule 1
	'->'           reduce using rule 1
	'.'            reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_parseMiniML -> decs .                        (rule 0)

	%eof           accept


State 4

	decs -> many__dec__ .                               (rule 9)

	%eof           reduce using rule 9


State 5

	many__dec__ -> many_rev__dec__ .                    (rule 57)
	many_rev__dec__ -> many_rev__dec__ . dec            (rule 65)

	let            shift, and enter state 7
	%eof           reduce using rule 57

	dec            goto state 6

State 6

	many_rev__dec__ -> many_rev__dec__ dec .            (rule 65)

	let            reduce using rule 65
	%eof           reduce using rule 65


State 7

	dec -> let . name many__pat__ optional__typeAnnotation__ '=' exp    (rule 8)

	identifier     shift, and enter state 2

	name           goto state 8

State 8

	dec -> let name . many__pat__ optional__typeAnnotation__ '=' exp    (rule 8)

	identifier     reduce using rule 66
	string         reduce using rule 66
	number         reduce using rule 66
	'='            reduce using rule 66
	'('            reduce using rule 66
	'['            reduce using rule 66
	':'            reduce using rule 66

	many__pat__    goto state 9
	many_rev__pat__goto state 10

State 9

	dec -> let name many__pat__ . optional__typeAnnotation__ '=' exp    (rule 8)

	'='            reduce using rule 60
	':'            shift, and enter state 19

	typeAnnotation goto state 17
	optional__typeAnnotation__goto state 18

State 10

	many__pat__ -> many_rev__pat__ .                    (rule 58)
	many_rev__pat__ -> many_rev__pat__ . pat            (rule 67)

	identifier     shift, and enter state 2
	string         shift, and enter state 13
	number         shift, and enter state 14
	'='            reduce using rule 58
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	':'            reduce using rule 58

	name           goto state 11
	pat            goto state 12

State 11

	pat -> name .                                       (rule 50)

	identifier     reduce using rule 50
	string         reduce using rule 50
	number         reduce using rule 50
	'='            reduce using rule 50
	'('            reduce using rule 50
	')'            reduce using rule 50
	'['            reduce using rule 50
	']'            reduce using rule 50
	','            reduce using rule 50
	':'            reduce using rule 50


State 12

	many_rev__pat__ -> many_rev__pat__ pat .            (rule 67)

	identifier     reduce using rule 67
	string         reduce using rule 67
	number         reduce using rule 67
	'='            reduce using rule 67
	'('            reduce using rule 67
	'['            reduce using rule 67
	':'            reduce using rule 67


State 13

	pat -> string .                                     (rule 51)

	identifier     reduce using rule 51
	string         reduce using rule 51
	number         reduce using rule 51
	'='            reduce using rule 51
	'('            reduce using rule 51
	')'            reduce using rule 51
	'['            reduce using rule 51
	']'            reduce using rule 51
	','            reduce using rule 51
	':'            reduce using rule 51


State 14

	pat -> number .                                     (rule 49)

	identifier     reduce using rule 49
	string         reduce using rule 49
	number         reduce using rule 49
	'='            reduce using rule 49
	'('            reduce using rule 49
	')'            reduce using rule 49
	'['            reduce using rule 49
	']'            reduce using rule 49
	','            reduce using rule 49
	':'            reduce using rule 49


State 15

	pat -> '(' . ')'                                    (rule 52)
	pat -> '(' . pat ')'                                (rule 53)
	pat -> '(' . pat typeAnnotation ')'                 (rule 54)

	identifier     shift, and enter state 2
	string         shift, and enter state 13
	number         shift, and enter state 14
	'('            shift, and enter state 15
	')'            shift, and enter state 28
	'['            shift, and enter state 16

	name           goto state 11
	pat            goto state 27

State 16

	pat -> '[' . sepBy__pat__','__ ']'                  (rule 55)

	']'            reduce using rule 72
	','            reduce using rule 72

	sepBy__pat__','__goto state 25
	sepBy_rev__pat__','__goto state 26

State 17

	optional__typeAnnotation__ -> typeAnnotation .      (rule 61)

	'='            reduce using rule 61


State 18

	dec -> let name many__pat__ optional__typeAnnotation__ . '=' exp    (rule 8)

	'='            shift, and enter state 24


State 19

	typeAnnotation -> ':' . type                        (rule 7)

	identifier     shift, and enter state 2
	'('            shift, and enter state 22
	'['            shift, and enter state 23

	name           goto state 20
	type           goto state 21

State 20

	type -> name .                                      (rule 2)

	'='            reduce using rule 2
	')'            reduce using rule 2
	']'            reduce using rule 2
	'->'           reduce using rule 2


State 21

	type -> type . '->' type                            (rule 6)
	typeAnnotation -> ':' type .                        (rule 7)

	'='            reduce using rule 7
	')'            reduce using rule 7
	'->'           shift, and enter state 48


State 22

	type -> '(' . ')'                                   (rule 3)
	type -> '(' . type ')'                              (rule 4)

	identifier     shift, and enter state 2
	'('            shift, and enter state 22
	')'            shift, and enter state 47
	'['            shift, and enter state 23

	name           goto state 20
	type           goto state 46

State 23

	type -> '[' . type ']'                              (rule 5)

	identifier     shift, and enter state 2
	'('            shift, and enter state 22
	'['            shift, and enter state 23

	name           goto state 20
	type           goto state 45

State 24

	dec -> let name many__pat__ optional__typeAnnotation__ '=' . exp    (rule 8)

	identifier     shift, and enter state 2
	string         shift, and enter state 39
	number         shift, and enter state 40
	if             shift, and enter state 41
	'-'            shift, and enter state 42
	'('            shift, and enter state 43
	'['            shift, and enter state 44

	name           goto state 33
	exp            goto state 34
	expapp         goto state 35
	expcond        goto state 36
	projatom       goto state 37
	atom           goto state 38

State 25

	pat -> '[' sepBy__pat__','__ . ']'                  (rule 55)

	']'            shift, and enter state 32


State 26

	sepBy__pat__','__ -> sepBy_rev__pat__','__ .        (rule 63)
	sepBy_rev__pat__','__ -> sepBy_rev__pat__','__ . ',' pat    (rule 73)

	']'            reduce using rule 63
	','            shift, and enter state 31


State 27

	pat -> '(' pat . ')'                                (rule 53)
	pat -> '(' pat . typeAnnotation ')'                 (rule 54)

	')'            shift, and enter state 30
	':'            shift, and enter state 19

	typeAnnotation goto state 29

State 28

	pat -> '(' ')' .                                    (rule 52)

	identifier     reduce using rule 52
	string         reduce using rule 52
	number         reduce using rule 52
	'='            reduce using rule 52
	'('            reduce using rule 52
	')'            reduce using rule 52
	'['            reduce using rule 52
	']'            reduce using rule 52
	','            reduce using rule 52
	':'            reduce using rule 52


State 29

	pat -> '(' pat typeAnnotation . ')'                 (rule 54)

	')'            shift, and enter state 86


State 30

	pat -> '(' pat ')' .                                (rule 53)

	identifier     reduce using rule 53
	string         reduce using rule 53
	number         reduce using rule 53
	'='            reduce using rule 53
	'('            reduce using rule 53
	')'            reduce using rule 53
	'['            reduce using rule 53
	']'            reduce using rule 53
	','            reduce using rule 53
	':'            reduce using rule 53


State 31

	sepBy_rev__pat__','__ -> sepBy_rev__pat__','__ ',' . pat    (rule 73)

	identifier     shift, and enter state 2
	string         shift, and enter state 13
	number         shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16

	name           goto state 11
	pat            goto state 85

State 32

	pat -> '[' sepBy__pat__','__ ']' .                  (rule 55)

	identifier     reduce using rule 55
	string         reduce using rule 55
	number         reduce using rule 55
	'='            reduce using rule 55
	'('            reduce using rule 55
	')'            reduce using rule 55
	'['            reduce using rule 55
	']'            reduce using rule 55
	','            reduce using rule 55
	':'            reduce using rule 55


State 33

	atom -> name .                                      (rule 32)

	identifier     reduce using rule 32
	string         reduce using rule 32
	number         reduce using rule 32
	let            reduce using rule 32
	then           reduce using rule 32
	else           reduce using rule 32
	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'*'            reduce using rule 32
	'/'            reduce using rule 32
	'='            reduce using rule 32
	'!='           reduce using rule 32
	'<'            reduce using rule 32
	'<='           reduce using rule 32
	'>'            reduce using rule 32
	'>='           reduce using rule 32
	'&&'           reduce using rule 32
	'||'           reduce using rule 32
	'('            reduce using rule 32
	')'            reduce using rule 32
	'['            reduce using rule 32
	']'            reduce using rule 32
	','            reduce using rule 32
	'.'            reduce using rule 32
	%eof           reduce using rule 32


State 34

	dec -> let name many__pat__ optional__typeAnnotation__ '=' exp .    (rule 8)
	exp -> exp . '+' exp                                (rule 13)
	exp -> exp . '-' exp                                (rule 14)
	exp -> exp . '*' exp                                (rule 15)
	exp -> exp . '/' exp                                (rule 16)
	exp -> exp . '=' exp                                (rule 17)
	exp -> exp . '!=' exp                               (rule 18)
	exp -> exp . '<' exp                                (rule 19)
	exp -> exp . '<=' exp                               (rule 20)
	exp -> exp . '>' exp                                (rule 21)
	exp -> exp . '>=' exp                               (rule 22)
	exp -> exp . '&&' exp                               (rule 23)
	exp -> exp . '||' exp                               (rule 24)

	let            reduce using rule 8
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'/'            shift, and enter state 76
	'='            shift, and enter state 77
	'!='           shift, and enter state 78
	'<'            shift, and enter state 79
	'<='           shift, and enter state 80
	'>'            shift, and enter state 81
	'>='           shift, and enter state 82
	'&&'           shift, and enter state 83
	'||'           shift, and enter state 84
	%eof           reduce using rule 8


State 35

	exp -> expapp .                                     (rule 10)
	expapp -> expapp . projatom                         (rule 26)

	identifier     shift, and enter state 2
	string         shift, and enter state 39
	number         shift, and enter state 40
	let            reduce using rule 10
	then           reduce using rule 10
	else           reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            reduce using rule 10
	'/'            reduce using rule 10
	'='            reduce using rule 10
	'!='           reduce using rule 10
	'<'            reduce using rule 10
	'<='           reduce using rule 10
	'>'            reduce using rule 10
	'>='           reduce using rule 10
	'&&'           reduce using rule 10
	'||'           reduce using rule 10
	'('            shift, and enter state 43
	')'            reduce using rule 10
	'['            shift, and enter state 44
	']'            reduce using rule 10
	','            reduce using rule 10
	%eof           reduce using rule 10

	name           goto state 33
	projatom       goto state 72
	atom           goto state 38

State 36

	exp -> expcond .                                    (rule 11)

	let            reduce using rule 11
	then           reduce using rule 11
	else           reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'/'            reduce using rule 11
	'='            reduce using rule 11
	'!='           reduce using rule 11
	'<'            reduce using rule 11
	'<='           reduce using rule 11
	'>'            reduce using rule 11
	'>='           reduce using rule 11
	'&&'           reduce using rule 11
	'||'           reduce using rule 11
	')'            reduce using rule 11
	']'            reduce using rule 11
	','            reduce using rule 11
	%eof           reduce using rule 11


State 37

	expapp -> projatom .                                (rule 27)

	identifier     reduce using rule 27
	string         reduce using rule 27
	number         reduce using rule 27
	let            reduce using rule 27
	then           reduce using rule 27
	else           reduce using rule 27
	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            reduce using rule 27
	'/'            reduce using rule 27
	'='            reduce using rule 27
	'!='           reduce using rule 27
	'<'            reduce using rule 27
	'<='           reduce using rule 27
	'>'            reduce using rule 27
	'>='           reduce using rule 27
	'&&'           reduce using rule 27
	'||'           reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	'['            reduce using rule 27
	']'            reduce using rule 27
	','            reduce using rule 27
	%eof           reduce using rule 27


State 38

	projatom -> atom . many__projection__               (rule 30)

	identifier     reduce using rule 68
	string         reduce using rule 68
	number         reduce using rule 68
	let            reduce using rule 68
	then           reduce using rule 68
	else           reduce using rule 68
	'+'            reduce using rule 68
	'-'            reduce using rule 68
	'*'            reduce using rule 68
	'/'            reduce using rule 68
	'='            reduce using rule 68
	'!='           reduce using rule 68
	'<'            reduce using rule 68
	'<='           reduce using rule 68
	'>'            reduce using rule 68
	'>='           reduce using rule 68
	'&&'           reduce using rule 68
	'||'           reduce using rule 68
	'('            reduce using rule 68
	')'            reduce using rule 68
	'['            reduce using rule 68
	']'            reduce using rule 68
	','            reduce using rule 68
	'.'            reduce using rule 68
	%eof           reduce using rule 68

	many__projection__goto state 70
	many_rev__projection__goto state 71

State 39

	atom -> string .                                    (rule 33)

	identifier     reduce using rule 33
	string         reduce using rule 33
	number         reduce using rule 33
	let            reduce using rule 33
	then           reduce using rule 33
	else           reduce using rule 33
	'+'            reduce using rule 33
	'-'            reduce using rule 33
	'*'            reduce using rule 33
	'/'            reduce using rule 33
	'='            reduce using rule 33
	'!='           reduce using rule 33
	'<'            reduce using rule 33
	'<='           reduce using rule 33
	'>'            reduce using rule 33
	'>='           reduce using rule 33
	'&&'           reduce using rule 33
	'||'           reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33
	'['            reduce using rule 33
	']'            reduce using rule 33
	','            reduce using rule 33
	'.'            reduce using rule 33
	%eof           reduce using rule 33


State 40

	atom -> number .                                    (rule 31)

	identifier     reduce using rule 31
	string         reduce using rule 31
	number         reduce using rule 31
	let            reduce using rule 31
	then           reduce using rule 31
	else           reduce using rule 31
	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'*'            reduce using rule 31
	'/'            reduce using rule 31
	'='            reduce using rule 31
	'!='           reduce using rule 31
	'<'            reduce using rule 31
	'<='           reduce using rule 31
	'>'            reduce using rule 31
	'>='           reduce using rule 31
	'&&'           reduce using rule 31
	'||'           reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31
	'['            reduce using rule 31
	']'            reduce using rule 31
	','            reduce using rule 31
	'.'            reduce using rule 31
	%eof           reduce using rule 31


State 41

	expcond -> if . exp then exp                        (rule 28)
	expcond -> if . exp then exp else exp               (rule 29)

	identifier     shift, and enter state 2
	string         shift, and enter state 39
	number         shift, and enter state 40
	if             shift, and enter state 41
	'-'            shift, and enter state 42
	'('            shift, and enter state 43
	'['            shift, and enter state 44

	name           goto state 33
	exp            goto state 69
	expapp         goto state 35
	expcond        goto state 36
	projatom       goto state 37
	atom           goto state 38

State 42

	exp -> '-' . exp                                    (rule 12)

	identifier     shift, and enter state 2
	string         shift, and enter state 39
	number         shift, and enter state 40
	if             shift, and enter state 41
	'-'            shift, and enter state 42
	'('            shift, and enter state 43
	'['            shift, and enter state 44

	name           goto state 33
	exp            goto state 68
	expapp         goto state 35
	expcond        goto state 36
	projatom       goto state 37
	atom           goto state 38

State 43

	atom -> '(' . ')'                                   (rule 34)
	atom -> '(' . exp ')'                               (rule 36)
	atom -> '(' . '+' ')'                               (rule 37)
	atom -> '(' . '-' ')'                               (rule 38)
	atom -> '(' . '*' ')'                               (rule 39)
	atom -> '(' . '/' ')'                               (rule 40)
	atom -> '(' . '=' ')'                               (rule 41)
	atom -> '(' . '!=' ')'                              (rule 42)
	atom -> '(' . '<' ')'                               (rule 43)
	atom -> '(' . '<=' ')'                              (rule 44)
	atom -> '(' . '>' ')'                               (rule 45)
	atom -> '(' . '>=' ')'                              (rule 46)
	atom -> '(' . '&&' ')'                              (rule 47)
	atom -> '(' . '||' ')'                              (rule 48)

	identifier     shift, and enter state 2
	string         shift, and enter state 39
	number         shift, and enter state 40
	if             shift, and enter state 41
	'+'            shift, and enter state 55
	'-'            shift, and enter state 56
	'*'            shift, and enter state 57
	'/'            shift, and enter state 58
	'='            shift, and enter state 59
	'!='           shift, and enter state 60
	'<'            shift, and enter state 61
	'<='           shift, and enter state 62
	'>'            shift, and enter state 63
	'>='           shift, and enter state 64
	'&&'           shift, and enter state 65
	'||'           shift, and enter state 66
	'('            shift, and enter state 43
	')'            shift, and enter state 67
	'['            shift, and enter state 44

	name           goto state 33
	exp            goto state 54
	expapp         goto state 35
	expcond        goto state 36
	projatom       goto state 37
	atom           goto state 38

State 44

	atom -> '[' . sepBy__exp__','__ ']'                 (rule 35)

	']'            reduce using rule 70
	','            reduce using rule 70

	sepBy__exp__','__goto state 52
	sepBy_rev__exp__','__goto state 53

State 45

	type -> '[' type . ']'                              (rule 5)
	type -> type . '->' type                            (rule 6)

	']'            shift, and enter state 51
	'->'           shift, and enter state 48


State 46

	type -> '(' type . ')'                              (rule 4)
	type -> type . '->' type                            (rule 6)

	')'            shift, and enter state 50
	'->'           shift, and enter state 48


State 47

	type -> '(' ')' .                                   (rule 3)

	'='            reduce using rule 3
	')'            reduce using rule 3
	']'            reduce using rule 3
	'->'           reduce using rule 3


State 48

	type -> type '->' . type                            (rule 6)

	identifier     shift, and enter state 2
	'('            shift, and enter state 22
	'['            shift, and enter state 23

	name           goto state 20
	type           goto state 49

State 49

	type -> type . '->' type                            (rule 6)
	type -> type '->' type .                            (rule 6)

	'='            reduce using rule 6
	')'            reduce using rule 6
	']'            reduce using rule 6
	'->'           shift, and enter state 48


State 50

	type -> '(' type ')' .                              (rule 4)

	'='            reduce using rule 4
	')'            reduce using rule 4
	']'            reduce using rule 4
	'->'           reduce using rule 4


State 51

	type -> '[' type ']' .                              (rule 5)

	'='            reduce using rule 5
	')'            reduce using rule 5
	']'            reduce using rule 5
	'->'           reduce using rule 5


State 52

	atom -> '[' sepBy__exp__','__ . ']'                 (rule 35)

	']'            shift, and enter state 116


State 53

	sepBy__exp__','__ -> sepBy_rev__exp__','__ .        (rule 62)
	sepBy_rev__exp__','__ -> sepBy_rev__exp__','__ . ',' exp    (rule 71)

	']'            reduce using rule 62
	','            shift, and enter state 115


State 54

	exp -> exp . '+' exp                                (rule 13)
	exp -> exp . '-' exp                                (rule 14)
	exp -> exp . '*' exp                                (rule 15)
	exp -> exp . '/' exp                                (rule 16)
	exp -> exp . '=' exp                                (rule 17)
	exp -> exp . '!=' exp                               (rule 18)
	exp -> exp . '<' exp                                (rule 19)
	exp -> exp . '<=' exp                               (rule 20)
	exp -> exp . '>' exp                                (rule 21)
	exp -> exp . '>=' exp                               (rule 22)
	exp -> exp . '&&' exp                               (rule 23)
	exp -> exp . '||' exp                               (rule 24)
	atom -> '(' exp . ')'                               (rule 36)

	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'/'            shift, and enter state 76
	'='            shift, and enter state 77
	'!='           shift, and enter state 78
	'<'            shift, and enter state 79
	'<='           shift, and enter state 80
	'>'            shift, and enter state 81
	'>='           shift, and enter state 82
	'&&'           shift, and enter state 83
	'||'           shift, and enter state 84
	')'            shift, and enter state 114


State 55

	atom -> '(' '+' . ')'                               (rule 37)

	')'            shift, and enter state 113


State 56

	exp -> '-' . exp                                    (rule 12)
	atom -> '(' '-' . ')'                               (rule 38)

	identifier     shift, and enter state 2
	string         shift, and enter state 39
	number         shift, and enter state 40
	if             shift, and enter state 41
	'-'            shift, and enter state 42
	'('            shift, and enter state 43
	')'            shift, and enter state 112
	'['            shift, and enter state 44

	name           goto state 33
	exp            goto state 68
	expapp         goto state 35
	expcond        goto state 36
	projatom       goto state 37
	atom           goto state 38

State 57

	atom -> '(' '*' . ')'                               (rule 39)

	')'            shift, and enter state 111


State 58

	atom -> '(' '/' . ')'                               (rule 40)

	')'            shift, and enter state 110


State 59

	atom -> '(' '=' . ')'                               (rule 41)

	')'            shift, and enter state 109


State 60

	atom -> '(' '!=' . ')'                              (rule 42)

	')'            shift, and enter state 108


State 61

	atom -> '(' '<' . ')'                               (rule 43)

	')'            shift, and enter state 107


State 62

	atom -> '(' '<=' . ')'                              (rule 44)

	')'            shift, and enter state 106


State 63

	atom -> '(' '>' . ')'                               (rule 45)

	')'            shift, and enter state 105


State 64

	atom -> '(' '>=' . ')'                              (rule 46)

	')'            shift, and enter state 104


State 65

	atom -> '(' '&&' . ')'                              (rule 47)

	')'            shift, and enter state 103


State 66

	atom -> '(' '||' . ')'                              (rule 48)

	')'            shift, and enter state 102


State 67

	atom -> '(' ')' .                                   (rule 34)

	identifier     reduce using rule 34
	string         reduce using rule 34
	number         reduce using rule 34
	let            reduce using rule 34
	then           reduce using rule 34
	else           reduce using rule 34
	'+'            reduce using rule 34
	'-'            reduce using rule 34
	'*'            reduce using rule 34
	'/'            reduce using rule 34
	'='            reduce using rule 34
	'!='           reduce using rule 34
	'<'            reduce using rule 34
	'<='           reduce using rule 34
	'>'            reduce using rule 34
	'>='           reduce using rule 34
	'&&'           reduce using rule 34
	'||'           reduce using rule 34
	'('            reduce using rule 34
	')'            reduce using rule 34
	'['            reduce using rule 34
	']'            reduce using rule 34
	','            reduce using rule 34
	'.'            reduce using rule 34
	%eof           reduce using rule 34


State 68

	exp -> '-' exp .                                    (rule 12)
	exp -> exp . '+' exp                                (rule 13)
	exp -> exp . '-' exp                                (rule 14)
	exp -> exp . '*' exp                                (rule 15)
	exp -> exp . '/' exp                                (rule 16)
	exp -> exp . '=' exp                                (rule 17)
	exp -> exp . '!=' exp                               (rule 18)
	exp -> exp . '<' exp                                (rule 19)
	exp -> exp . '<=' exp                               (rule 20)
	exp -> exp . '>' exp                                (rule 21)
	exp -> exp . '>=' exp                               (rule 22)
	exp -> exp . '&&' exp                               (rule 23)
	exp -> exp . '||' exp                               (rule 24)

	let            reduce using rule 12
	then           reduce using rule 12
	else           reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            shift, and enter state 75
	'/'            shift, and enter state 76
	'='            reduce using rule 12
	'!='           reduce using rule 12
	'<'            shift, and enter state 79
			(reduce using rule 12)

	'<='           reduce using rule 12
	'>'            reduce using rule 12
	'>='           reduce using rule 12
	'&&'           reduce using rule 12
	'||'           reduce using rule 12
	')'            reduce using rule 12
	']'            reduce using rule 12
	','            reduce using rule 12
	%eof           reduce using rule 12


State 69

	exp -> exp . '+' exp                                (rule 13)
	exp -> exp . '-' exp                                (rule 14)
	exp -> exp . '*' exp                                (rule 15)
	exp -> exp . '/' exp                                (rule 16)
	exp -> exp . '=' exp                                (rule 17)
	exp -> exp . '!=' exp                               (rule 18)
	exp -> exp . '<' exp                                (rule 19)
	exp -> exp . '<=' exp                               (rule 20)
	exp -> exp . '>' exp                                (rule 21)
	exp -> exp . '>=' exp                               (rule 22)
	exp -> exp . '&&' exp                               (rule 23)
	exp -> exp . '||' exp                               (rule 24)
	expcond -> if exp . then exp                        (rule 28)
	expcond -> if exp . then exp else exp               (rule 29)

	then           shift, and enter state 101
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'/'            shift, and enter state 76
	'='            shift, and enter state 77
	'!='           shift, and enter state 78
	'<'            shift, and enter state 79
	'<='           shift, and enter state 80
	'>'            shift, and enter state 81
	'>='           shift, and enter state 82
	'&&'           shift, and enter state 83
	'||'           shift, and enter state 84


State 70

	projatom -> atom many__projection__ .               (rule 30)

	identifier     reduce using rule 30
	string         reduce using rule 30
	number         reduce using rule 30
	let            reduce using rule 30
	then           reduce using rule 30
	else           reduce using rule 30
	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'*'            reduce using rule 30
	'/'            reduce using rule 30
	'='            reduce using rule 30
	'!='           reduce using rule 30
	'<'            reduce using rule 30
	'<='           reduce using rule 30
	'>'            reduce using rule 30
	'>='           reduce using rule 30
	'&&'           reduce using rule 30
	'||'           reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30
	'['            reduce using rule 30
	']'            reduce using rule 30
	','            reduce using rule 30
	%eof           reduce using rule 30


State 71

	many__projection__ -> many_rev__projection__ .      (rule 59)
	many_rev__projection__ -> many_rev__projection__ . projection    (rule 69)

	identifier     reduce using rule 59
	string         reduce using rule 59
	number         reduce using rule 59
	let            reduce using rule 59
	then           reduce using rule 59
	else           reduce using rule 59
	'+'            reduce using rule 59
	'-'            reduce using rule 59
	'*'            reduce using rule 59
	'/'            reduce using rule 59
	'='            reduce using rule 59
	'!='           reduce using rule 59
	'<'            reduce using rule 59
	'<='           reduce using rule 59
	'>'            reduce using rule 59
	'>='           reduce using rule 59
	'&&'           reduce using rule 59
	'||'           reduce using rule 59
	'('            reduce using rule 59
	')'            reduce using rule 59
	'['            reduce using rule 59
	']'            reduce using rule 59
	','            reduce using rule 59
	'.'            shift, and enter state 100
	%eof           reduce using rule 59

	projection     goto state 99

State 72

	expapp -> expapp projatom .                         (rule 26)

	identifier     reduce using rule 26
	string         reduce using rule 26
	number         reduce using rule 26
	let            reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	'='            reduce using rule 26
	'!='           reduce using rule 26
	'<'            reduce using rule 26
	'<='           reduce using rule 26
	'>'            reduce using rule 26
	'>='           reduce using rule 26
	'&&'           reduce using rule 26
	'||'           reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	'['            reduce using rule 26
	']'            reduce using rule 26
	','            reduce using rule 26
	%eof           reduce using rule 26


State 73

	exp -> exp '+' . exp                                (rule 13)

	identifier     shift, and enter state 2
	string         shift, and enter state 39
	number         shift, and enter state 40
	if             shift, and enter state 41
	'-'            shift, and enter state 42
	'('            shift, and enter state 43
	'['            shift, and enter state 44

	name           goto state 33
	exp            goto state 98
	expapp         goto state 35
	expcond        goto state 36
	projatom       goto state 37
	atom           goto state 38

State 74

	exp -> exp '-' . exp                                (rule 14)

	identifier     shift, and enter state 2
	string         shift, and enter state 39
	number         shift, and enter state 40
	if             shift, and enter state 41
	'-'            shift, and enter state 42
	'('            shift, and enter state 43
	'['            shift, and enter state 44

	name           goto state 33
	exp            goto state 97
	expapp         goto state 35
	expcond        goto state 36
	projatom       goto state 37
	atom           goto state 38

State 75

	exp -> exp '*' . exp                                (rule 15)

	identifier     shift, and enter state 2
	string         shift, and enter state 39
	number         shift, and enter state 40
	if             shift, and enter state 41
	'-'            shift, and enter state 42
	'('            shift, and enter state 43
	'['            shift, and enter state 44

	name           goto state 33
	exp            goto state 96
	expapp         goto state 35
	expcond        goto state 36
	projatom       goto state 37
	atom           goto state 38

State 76

	exp -> exp '/' . exp                                (rule 16)

	identifier     shift, and enter state 2
	string         shift, and enter state 39
	number         shift, and enter state 40
	if             shift, and enter state 41
	'-'            shift, and enter state 42
	'('            shift, and enter state 43
	'['            shift, and enter state 44

	name           goto state 33
	exp            goto state 95
	expapp         goto state 35
	expcond        goto state 36
	projatom       goto state 37
	atom           goto state 38

State 77

	exp -> exp '=' . exp                                (rule 17)

	identifier     shift, and enter state 2
	string         shift, and enter state 39
	number         shift, and enter state 40
	if             shift, and enter state 41
	'-'            shift, and enter state 42
	'('            shift, and enter state 43
	'['            shift, and enter state 44

	name           goto state 33
	exp            goto state 94
	expapp         goto state 35
	expcond        goto state 36
	projatom       goto state 37
	atom           goto state 38

State 78

	exp -> exp '!=' . exp                               (rule 18)

	identifier     shift, and enter state 2
	string         shift, and enter state 39
	number         shift, and enter state 40
	if             shift, and enter state 41
	'-'            shift, and enter state 42
	'('            shift, and enter state 43
	'['            shift, and enter state 44

	name           goto state 33
	exp            goto state 93
	expapp         goto state 35
	expcond        goto state 36
	projatom       goto state 37
	atom           goto state 38

State 79

	exp -> exp '<' . exp                                (rule 19)

	identifier     shift, and enter state 2
	string         shift, and enter state 39
	number         shift, and enter state 40
	if             shift, and enter state 41
	'-'            shift, and enter state 42
	'('            shift, and enter state 43
	'['            shift, and enter state 44

	name           goto state 33
	exp            goto state 92
	expapp         goto state 35
	expcond        goto state 36
	projatom       goto state 37
	atom           goto state 38

State 80

	exp -> exp '<=' . exp                               (rule 20)

	identifier     shift, and enter state 2
	string         shift, and enter state 39
	number         shift, and enter state 40
	if             shift, and enter state 41
	'-'            shift, and enter state 42
	'('            shift, and enter state 43
	'['            shift, and enter state 44

	name           goto state 33
	exp            goto state 91
	expapp         goto state 35
	expcond        goto state 36
	projatom       goto state 37
	atom           goto state 38

State 81

	exp -> exp '>' . exp                                (rule 21)

	identifier     shift, and enter state 2
	string         shift, and enter state 39
	number         shift, and enter state 40
	if             shift, and enter state 41
	'-'            shift, and enter state 42
	'('            shift, and enter state 43
	'['            shift, and enter state 44

	name           goto state 33
	exp            goto state 90
	expapp         goto state 35
	expcond        goto state 36
	projatom       goto state 37
	atom           goto state 38

State 82

	exp -> exp '>=' . exp                               (rule 22)

	identifier     shift, and enter state 2
	string         shift, and enter state 39
	number         shift, and enter state 40
	if             shift, and enter state 41
	'-'            shift, and enter state 42
	'('            shift, and enter state 43
	'['            shift, and enter state 44

	name           goto state 33
	exp            goto state 89
	expapp         goto state 35
	expcond        goto state 36
	projatom       goto state 37
	atom           goto state 38

State 83

	exp -> exp '&&' . exp                               (rule 23)

	identifier     shift, and enter state 2
	string         shift, and enter state 39
	number         shift, and enter state 40
	if             shift, and enter state 41
	'-'            shift, and enter state 42
	'('            shift, and enter state 43
	'['            shift, and enter state 44

	name           goto state 33
	exp            goto state 88
	expapp         goto state 35
	expcond        goto state 36
	projatom       goto state 37
	atom           goto state 38

State 84

	exp -> exp '||' . exp                               (rule 24)

	identifier     shift, and enter state 2
	string         shift, and enter state 39
	number         shift, and enter state 40
	if             shift, and enter state 41
	'-'            shift, and enter state 42
	'('            shift, and enter state 43
	'['            shift, and enter state 44

	name           goto state 33
	exp            goto state 87
	expapp         goto state 35
	expcond        goto state 36
	projatom       goto state 37
	atom           goto state 38

State 85

	sepBy_rev__pat__','__ -> sepBy_rev__pat__','__ ',' pat .    (rule 73)

	']'            reduce using rule 73
	','            reduce using rule 73


State 86

	pat -> '(' pat typeAnnotation ')' .                 (rule 54)

	identifier     reduce using rule 54
	string         reduce using rule 54
	number         reduce using rule 54
	'='            reduce using rule 54
	'('            reduce using rule 54
	')'            reduce using rule 54
	'['            reduce using rule 54
	']'            reduce using rule 54
	','            reduce using rule 54
	':'            reduce using rule 54


State 87

	exp -> exp . '+' exp                                (rule 13)
	exp -> exp . '-' exp                                (rule 14)
	exp -> exp . '*' exp                                (rule 15)
	exp -> exp . '/' exp                                (rule 16)
	exp -> exp . '=' exp                                (rule 17)
	exp -> exp . '!=' exp                               (rule 18)
	exp -> exp . '<' exp                                (rule 19)
	exp -> exp . '<=' exp                               (rule 20)
	exp -> exp . '>' exp                                (rule 21)
	exp -> exp . '>=' exp                               (rule 22)
	exp -> exp . '&&' exp                               (rule 23)
	exp -> exp . '||' exp                               (rule 24)
	exp -> exp '||' exp .                               (rule 24)

	let            reduce using rule 24
	then           reduce using rule 24
	else           reduce using rule 24
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'/'            shift, and enter state 76
	'='            shift, and enter state 77
	'!='           shift, and enter state 78
	'<'            shift, and enter state 79
			(reduce using rule 24)

	'<='           shift, and enter state 80
	'>'            shift, and enter state 81
	'>='           shift, and enter state 82
	'&&'           shift, and enter state 83
	'||'           reduce using rule 24
	')'            reduce using rule 24
	']'            reduce using rule 24
	','            reduce using rule 24
	%eof           reduce using rule 24


State 88

	exp -> exp . '+' exp                                (rule 13)
	exp -> exp . '-' exp                                (rule 14)
	exp -> exp . '*' exp                                (rule 15)
	exp -> exp . '/' exp                                (rule 16)
	exp -> exp . '=' exp                                (rule 17)
	exp -> exp . '!=' exp                               (rule 18)
	exp -> exp . '<' exp                                (rule 19)
	exp -> exp . '<=' exp                               (rule 20)
	exp -> exp . '>' exp                                (rule 21)
	exp -> exp . '>=' exp                               (rule 22)
	exp -> exp . '&&' exp                               (rule 23)
	exp -> exp '&&' exp .                               (rule 23)
	exp -> exp . '||' exp                               (rule 24)

	let            reduce using rule 23
	then           reduce using rule 23
	else           reduce using rule 23
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'/'            shift, and enter state 76
	'='            shift, and enter state 77
	'!='           shift, and enter state 78
	'<'            shift, and enter state 79
			(reduce using rule 23)

	'<='           shift, and enter state 80
	'>'            shift, and enter state 81
	'>='           shift, and enter state 82
	'&&'           reduce using rule 23
	'||'           reduce using rule 23
	')'            reduce using rule 23
	']'            reduce using rule 23
	','            reduce using rule 23
	%eof           reduce using rule 23


State 89

	exp -> exp . '+' exp                                (rule 13)
	exp -> exp . '-' exp                                (rule 14)
	exp -> exp . '*' exp                                (rule 15)
	exp -> exp . '/' exp                                (rule 16)
	exp -> exp . '=' exp                                (rule 17)
	exp -> exp . '!=' exp                               (rule 18)
	exp -> exp . '<' exp                                (rule 19)
	exp -> exp . '<=' exp                               (rule 20)
	exp -> exp . '>' exp                                (rule 21)
	exp -> exp . '>=' exp                               (rule 22)
	exp -> exp '>=' exp .                               (rule 22)
	exp -> exp . '&&' exp                               (rule 23)
	exp -> exp . '||' exp                               (rule 24)

	let            reduce using rule 22
	then           reduce using rule 22
	else           reduce using rule 22
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'/'            shift, and enter state 76
	'='            fail
	'!='           fail
	'<'            shift, and enter state 79
			(reduce using rule 22)

	'<='           fail
	'>'            fail
	'>='           fail
	'&&'           reduce using rule 22
	'||'           reduce using rule 22
	')'            reduce using rule 22
	']'            reduce using rule 22
	','            reduce using rule 22
	%eof           reduce using rule 22


State 90

	exp -> exp . '+' exp                                (rule 13)
	exp -> exp . '-' exp                                (rule 14)
	exp -> exp . '*' exp                                (rule 15)
	exp -> exp . '/' exp                                (rule 16)
	exp -> exp . '=' exp                                (rule 17)
	exp -> exp . '!=' exp                               (rule 18)
	exp -> exp . '<' exp                                (rule 19)
	exp -> exp . '<=' exp                               (rule 20)
	exp -> exp . '>' exp                                (rule 21)
	exp -> exp '>' exp .                                (rule 21)
	exp -> exp . '>=' exp                               (rule 22)
	exp -> exp . '&&' exp                               (rule 23)
	exp -> exp . '||' exp                               (rule 24)

	let            reduce using rule 21
	then           reduce using rule 21
	else           reduce using rule 21
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'/'            shift, and enter state 76
	'='            fail
	'!='           fail
	'<'            shift, and enter state 79
			(reduce using rule 21)

	'<='           fail
	'>'            fail
	'>='           fail
	'&&'           reduce using rule 21
	'||'           reduce using rule 21
	')'            reduce using rule 21
	']'            reduce using rule 21
	','            reduce using rule 21
	%eof           reduce using rule 21


State 91

	exp -> exp . '+' exp                                (rule 13)
	exp -> exp . '-' exp                                (rule 14)
	exp -> exp . '*' exp                                (rule 15)
	exp -> exp . '/' exp                                (rule 16)
	exp -> exp . '=' exp                                (rule 17)
	exp -> exp . '!=' exp                               (rule 18)
	exp -> exp . '<' exp                                (rule 19)
	exp -> exp . '<=' exp                               (rule 20)
	exp -> exp '<=' exp .                               (rule 20)
	exp -> exp . '>' exp                                (rule 21)
	exp -> exp . '>=' exp                               (rule 22)
	exp -> exp . '&&' exp                               (rule 23)
	exp -> exp . '||' exp                               (rule 24)

	let            reduce using rule 20
	then           reduce using rule 20
	else           reduce using rule 20
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'/'            shift, and enter state 76
	'='            fail
	'!='           fail
	'<'            shift, and enter state 79
			(reduce using rule 20)

	'<='           fail
	'>'            fail
	'>='           fail
	'&&'           reduce using rule 20
	'||'           reduce using rule 20
	')'            reduce using rule 20
	']'            reduce using rule 20
	','            reduce using rule 20
	%eof           reduce using rule 20


State 92

	exp -> exp . '+' exp                                (rule 13)
	exp -> exp . '-' exp                                (rule 14)
	exp -> exp . '*' exp                                (rule 15)
	exp -> exp . '/' exp                                (rule 16)
	exp -> exp . '=' exp                                (rule 17)
	exp -> exp . '!=' exp                               (rule 18)
	exp -> exp . '<' exp                                (rule 19)
	exp -> exp '<' exp .                                (rule 19)
	exp -> exp . '<=' exp                               (rule 20)
	exp -> exp . '>' exp                                (rule 21)
	exp -> exp . '>=' exp                               (rule 22)
	exp -> exp . '&&' exp                               (rule 23)
	exp -> exp . '||' exp                               (rule 24)

	let            reduce using rule 19
	then           reduce using rule 19
	else           reduce using rule 19
	'+'            shift, and enter state 73
			(reduce using rule 19)

	'-'            shift, and enter state 74
			(reduce using rule 19)

	'*'            shift, and enter state 75
			(reduce using rule 19)

	'/'            shift, and enter state 76
			(reduce using rule 19)

	'='            shift, and enter state 77
			(reduce using rule 19)

	'!='           shift, and enter state 78
			(reduce using rule 19)

	'<'            shift, and enter state 79
			(reduce using rule 19)

	'<='           shift, and enter state 80
			(reduce using rule 19)

	'>'            shift, and enter state 81
			(reduce using rule 19)

	'>='           shift, and enter state 82
			(reduce using rule 19)

	'&&'           shift, and enter state 83
			(reduce using rule 19)

	'||'           shift, and enter state 84
			(reduce using rule 19)

	')'            reduce using rule 19
	']'            reduce using rule 19
	','            reduce using rule 19
	%eof           reduce using rule 19


State 93

	exp -> exp . '+' exp                                (rule 13)
	exp -> exp . '-' exp                                (rule 14)
	exp -> exp . '*' exp                                (rule 15)
	exp -> exp . '/' exp                                (rule 16)
	exp -> exp . '=' exp                                (rule 17)
	exp -> exp . '!=' exp                               (rule 18)
	exp -> exp '!=' exp .                               (rule 18)
	exp -> exp . '<' exp                                (rule 19)
	exp -> exp . '<=' exp                               (rule 20)
	exp -> exp . '>' exp                                (rule 21)
	exp -> exp . '>=' exp                               (rule 22)
	exp -> exp . '&&' exp                               (rule 23)
	exp -> exp . '||' exp                               (rule 24)

	let            reduce using rule 18
	then           reduce using rule 18
	else           reduce using rule 18
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'/'            shift, and enter state 76
	'='            fail
	'!='           fail
	'<'            shift, and enter state 79
			(reduce using rule 18)

	'<='           fail
	'>'            fail
	'>='           fail
	'&&'           reduce using rule 18
	'||'           reduce using rule 18
	')'            reduce using rule 18
	']'            reduce using rule 18
	','            reduce using rule 18
	%eof           reduce using rule 18


State 94

	exp -> exp . '+' exp                                (rule 13)
	exp -> exp . '-' exp                                (rule 14)
	exp -> exp . '*' exp                                (rule 15)
	exp -> exp . '/' exp                                (rule 16)
	exp -> exp . '=' exp                                (rule 17)
	exp -> exp '=' exp .                                (rule 17)
	exp -> exp . '!=' exp                               (rule 18)
	exp -> exp . '<' exp                                (rule 19)
	exp -> exp . '<=' exp                               (rule 20)
	exp -> exp . '>' exp                                (rule 21)
	exp -> exp . '>=' exp                               (rule 22)
	exp -> exp . '&&' exp                               (rule 23)
	exp -> exp . '||' exp                               (rule 24)

	let            reduce using rule 17
	then           reduce using rule 17
	else           reduce using rule 17
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'/'            shift, and enter state 76
	'='            fail
	'!='           fail
	'<'            shift, and enter state 79
			(reduce using rule 17)

	'<='           fail
	'>'            fail
	'>='           fail
	'&&'           reduce using rule 17
	'||'           reduce using rule 17
	')'            reduce using rule 17
	']'            reduce using rule 17
	','            reduce using rule 17
	%eof           reduce using rule 17


State 95

	exp -> exp . '+' exp                                (rule 13)
	exp -> exp . '-' exp                                (rule 14)
	exp -> exp . '*' exp                                (rule 15)
	exp -> exp . '/' exp                                (rule 16)
	exp -> exp '/' exp .                                (rule 16)
	exp -> exp . '=' exp                                (rule 17)
	exp -> exp . '!=' exp                               (rule 18)
	exp -> exp . '<' exp                                (rule 19)
	exp -> exp . '<=' exp                               (rule 20)
	exp -> exp . '>' exp                                (rule 21)
	exp -> exp . '>=' exp                               (rule 22)
	exp -> exp . '&&' exp                               (rule 23)
	exp -> exp . '||' exp                               (rule 24)

	let            reduce using rule 16
	then           reduce using rule 16
	else           reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	'/'            reduce using rule 16
	'='            reduce using rule 16
	'!='           reduce using rule 16
	'<'            shift, and enter state 79
			(reduce using rule 16)

	'<='           reduce using rule 16
	'>'            reduce using rule 16
	'>='           reduce using rule 16
	'&&'           reduce using rule 16
	'||'           reduce using rule 16
	')'            reduce using rule 16
	']'            reduce using rule 16
	','            reduce using rule 16
	%eof           reduce using rule 16


State 96

	exp -> exp . '+' exp                                (rule 13)
	exp -> exp . '-' exp                                (rule 14)
	exp -> exp . '*' exp                                (rule 15)
	exp -> exp '*' exp .                                (rule 15)
	exp -> exp . '/' exp                                (rule 16)
	exp -> exp . '=' exp                                (rule 17)
	exp -> exp . '!=' exp                               (rule 18)
	exp -> exp . '<' exp                                (rule 19)
	exp -> exp . '<=' exp                               (rule 20)
	exp -> exp . '>' exp                                (rule 21)
	exp -> exp . '>=' exp                               (rule 22)
	exp -> exp . '&&' exp                               (rule 23)
	exp -> exp . '||' exp                               (rule 24)

	let            reduce using rule 15
	then           reduce using rule 15
	else           reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	'/'            reduce using rule 15
	'='            reduce using rule 15
	'!='           reduce using rule 15
	'<'            shift, and enter state 79
			(reduce using rule 15)

	'<='           reduce using rule 15
	'>'            reduce using rule 15
	'>='           reduce using rule 15
	'&&'           reduce using rule 15
	'||'           reduce using rule 15
	')'            reduce using rule 15
	']'            reduce using rule 15
	','            reduce using rule 15
	%eof           reduce using rule 15


State 97

	exp -> exp . '+' exp                                (rule 13)
	exp -> exp . '-' exp                                (rule 14)
	exp -> exp '-' exp .                                (rule 14)
	exp -> exp . '*' exp                                (rule 15)
	exp -> exp . '/' exp                                (rule 16)
	exp -> exp . '=' exp                                (rule 17)
	exp -> exp . '!=' exp                               (rule 18)
	exp -> exp . '<' exp                                (rule 19)
	exp -> exp . '<=' exp                               (rule 20)
	exp -> exp . '>' exp                                (rule 21)
	exp -> exp . '>=' exp                               (rule 22)
	exp -> exp . '&&' exp                               (rule 23)
	exp -> exp . '||' exp                               (rule 24)

	let            reduce using rule 14
	then           reduce using rule 14
	else           reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            shift, and enter state 75
	'/'            shift, and enter state 76
	'='            reduce using rule 14
	'!='           reduce using rule 14
	'<'            shift, and enter state 79
			(reduce using rule 14)

	'<='           reduce using rule 14
	'>'            reduce using rule 14
	'>='           reduce using rule 14
	'&&'           reduce using rule 14
	'||'           reduce using rule 14
	')'            reduce using rule 14
	']'            reduce using rule 14
	','            reduce using rule 14
	%eof           reduce using rule 14


State 98

	exp -> exp . '+' exp                                (rule 13)
	exp -> exp '+' exp .                                (rule 13)
	exp -> exp . '-' exp                                (rule 14)
	exp -> exp . '*' exp                                (rule 15)
	exp -> exp . '/' exp                                (rule 16)
	exp -> exp . '=' exp                                (rule 17)
	exp -> exp . '!=' exp                               (rule 18)
	exp -> exp . '<' exp                                (rule 19)
	exp -> exp . '<=' exp                               (rule 20)
	exp -> exp . '>' exp                                (rule 21)
	exp -> exp . '>=' exp                               (rule 22)
	exp -> exp . '&&' exp                               (rule 23)
	exp -> exp . '||' exp                               (rule 24)

	let            reduce using rule 13
	then           reduce using rule 13
	else           reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            shift, and enter state 75
	'/'            shift, and enter state 76
	'='            reduce using rule 13
	'!='           reduce using rule 13
	'<'            shift, and enter state 79
			(reduce using rule 13)

	'<='           reduce using rule 13
	'>'            reduce using rule 13
	'>='           reduce using rule 13
	'&&'           reduce using rule 13
	'||'           reduce using rule 13
	')'            reduce using rule 13
	']'            reduce using rule 13
	','            reduce using rule 13
	%eof           reduce using rule 13


State 99

	many_rev__projection__ -> many_rev__projection__ projection .    (rule 69)

	identifier     reduce using rule 69
	string         reduce using rule 69
	number         reduce using rule 69
	let            reduce using rule 69
	then           reduce using rule 69
	else           reduce using rule 69
	'+'            reduce using rule 69
	'-'            reduce using rule 69
	'*'            reduce using rule 69
	'/'            reduce using rule 69
	'='            reduce using rule 69
	'!='           reduce using rule 69
	'<'            reduce using rule 69
	'<='           reduce using rule 69
	'>'            reduce using rule 69
	'>='           reduce using rule 69
	'&&'           reduce using rule 69
	'||'           reduce using rule 69
	'('            reduce using rule 69
	')'            reduce using rule 69
	'['            reduce using rule 69
	']'            reduce using rule 69
	','            reduce using rule 69
	'.'            reduce using rule 69
	%eof           reduce using rule 69


State 100

	projection -> '.' . '(' exp ')'                     (rule 56)

	'('            shift, and enter state 119


State 101

	expcond -> if exp then . exp                        (rule 28)
	expcond -> if exp then . exp else exp               (rule 29)

	identifier     shift, and enter state 2
	string         shift, and enter state 39
	number         shift, and enter state 40
	if             shift, and enter state 41
	'-'            shift, and enter state 42
	'('            shift, and enter state 43
	'['            shift, and enter state 44

	name           goto state 33
	exp            goto state 118
	expapp         goto state 35
	expcond        goto state 36
	projatom       goto state 37
	atom           goto state 38

State 102

	atom -> '(' '||' ')' .                              (rule 48)

	identifier     reduce using rule 48
	string         reduce using rule 48
	number         reduce using rule 48
	let            reduce using rule 48
	then           reduce using rule 48
	else           reduce using rule 48
	'+'            reduce using rule 48
	'-'            reduce using rule 48
	'*'            reduce using rule 48
	'/'            reduce using rule 48
	'='            reduce using rule 48
	'!='           reduce using rule 48
	'<'            reduce using rule 48
	'<='           reduce using rule 48
	'>'            reduce using rule 48
	'>='           reduce using rule 48
	'&&'           reduce using rule 48
	'||'           reduce using rule 48
	'('            reduce using rule 48
	')'            reduce using rule 48
	'['            reduce using rule 48
	']'            reduce using rule 48
	','            reduce using rule 48
	'.'            reduce using rule 48
	%eof           reduce using rule 48


State 103

	atom -> '(' '&&' ')' .                              (rule 47)

	identifier     reduce using rule 47
	string         reduce using rule 47
	number         reduce using rule 47
	let            reduce using rule 47
	then           reduce using rule 47
	else           reduce using rule 47
	'+'            reduce using rule 47
	'-'            reduce using rule 47
	'*'            reduce using rule 47
	'/'            reduce using rule 47
	'='            reduce using rule 47
	'!='           reduce using rule 47
	'<'            reduce using rule 47
	'<='           reduce using rule 47
	'>'            reduce using rule 47
	'>='           reduce using rule 47
	'&&'           reduce using rule 47
	'||'           reduce using rule 47
	'('            reduce using rule 47
	')'            reduce using rule 47
	'['            reduce using rule 47
	']'            reduce using rule 47
	','            reduce using rule 47
	'.'            reduce using rule 47
	%eof           reduce using rule 47


State 104

	atom -> '(' '>=' ')' .                              (rule 46)

	identifier     reduce using rule 46
	string         reduce using rule 46
	number         reduce using rule 46
	let            reduce using rule 46
	then           reduce using rule 46
	else           reduce using rule 46
	'+'            reduce using rule 46
	'-'            reduce using rule 46
	'*'            reduce using rule 46
	'/'            reduce using rule 46
	'='            reduce using rule 46
	'!='           reduce using rule 46
	'<'            reduce using rule 46
	'<='           reduce using rule 46
	'>'            reduce using rule 46
	'>='           reduce using rule 46
	'&&'           reduce using rule 46
	'||'           reduce using rule 46
	'('            reduce using rule 46
	')'            reduce using rule 46
	'['            reduce using rule 46
	']'            reduce using rule 46
	','            reduce using rule 46
	'.'            reduce using rule 46
	%eof           reduce using rule 46


State 105

	atom -> '(' '>' ')' .                               (rule 45)

	identifier     reduce using rule 45
	string         reduce using rule 45
	number         reduce using rule 45
	let            reduce using rule 45
	then           reduce using rule 45
	else           reduce using rule 45
	'+'            reduce using rule 45
	'-'            reduce using rule 45
	'*'            reduce using rule 45
	'/'            reduce using rule 45
	'='            reduce using rule 45
	'!='           reduce using rule 45
	'<'            reduce using rule 45
	'<='           reduce using rule 45
	'>'            reduce using rule 45
	'>='           reduce using rule 45
	'&&'           reduce using rule 45
	'||'           reduce using rule 45
	'('            reduce using rule 45
	')'            reduce using rule 45
	'['            reduce using rule 45
	']'            reduce using rule 45
	','            reduce using rule 45
	'.'            reduce using rule 45
	%eof           reduce using rule 45


State 106

	atom -> '(' '<=' ')' .                              (rule 44)

	identifier     reduce using rule 44
	string         reduce using rule 44
	number         reduce using rule 44
	let            reduce using rule 44
	then           reduce using rule 44
	else           reduce using rule 44
	'+'            reduce using rule 44
	'-'            reduce using rule 44
	'*'            reduce using rule 44
	'/'            reduce using rule 44
	'='            reduce using rule 44
	'!='           reduce using rule 44
	'<'            reduce using rule 44
	'<='           reduce using rule 44
	'>'            reduce using rule 44
	'>='           reduce using rule 44
	'&&'           reduce using rule 44
	'||'           reduce using rule 44
	'('            reduce using rule 44
	')'            reduce using rule 44
	'['            reduce using rule 44
	']'            reduce using rule 44
	','            reduce using rule 44
	'.'            reduce using rule 44
	%eof           reduce using rule 44


State 107

	atom -> '(' '<' ')' .                               (rule 43)

	identifier     reduce using rule 43
	string         reduce using rule 43
	number         reduce using rule 43
	let            reduce using rule 43
	then           reduce using rule 43
	else           reduce using rule 43
	'+'            reduce using rule 43
	'-'            reduce using rule 43
	'*'            reduce using rule 43
	'/'            reduce using rule 43
	'='            reduce using rule 43
	'!='           reduce using rule 43
	'<'            reduce using rule 43
	'<='           reduce using rule 43
	'>'            reduce using rule 43
	'>='           reduce using rule 43
	'&&'           reduce using rule 43
	'||'           reduce using rule 43
	'('            reduce using rule 43
	')'            reduce using rule 43
	'['            reduce using rule 43
	']'            reduce using rule 43
	','            reduce using rule 43
	'.'            reduce using rule 43
	%eof           reduce using rule 43


State 108

	atom -> '(' '!=' ')' .                              (rule 42)

	identifier     reduce using rule 42
	string         reduce using rule 42
	number         reduce using rule 42
	let            reduce using rule 42
	then           reduce using rule 42
	else           reduce using rule 42
	'+'            reduce using rule 42
	'-'            reduce using rule 42
	'*'            reduce using rule 42
	'/'            reduce using rule 42
	'='            reduce using rule 42
	'!='           reduce using rule 42
	'<'            reduce using rule 42
	'<='           reduce using rule 42
	'>'            reduce using rule 42
	'>='           reduce using rule 42
	'&&'           reduce using rule 42
	'||'           reduce using rule 42
	'('            reduce using rule 42
	')'            reduce using rule 42
	'['            reduce using rule 42
	']'            reduce using rule 42
	','            reduce using rule 42
	'.'            reduce using rule 42
	%eof           reduce using rule 42


State 109

	atom -> '(' '=' ')' .                               (rule 41)

	identifier     reduce using rule 41
	string         reduce using rule 41
	number         reduce using rule 41
	let            reduce using rule 41
	then           reduce using rule 41
	else           reduce using rule 41
	'+'            reduce using rule 41
	'-'            reduce using rule 41
	'*'            reduce using rule 41
	'/'            reduce using rule 41
	'='            reduce using rule 41
	'!='           reduce using rule 41
	'<'            reduce using rule 41
	'<='           reduce using rule 41
	'>'            reduce using rule 41
	'>='           reduce using rule 41
	'&&'           reduce using rule 41
	'||'           reduce using rule 41
	'('            reduce using rule 41
	')'            reduce using rule 41
	'['            reduce using rule 41
	']'            reduce using rule 41
	','            reduce using rule 41
	'.'            reduce using rule 41
	%eof           reduce using rule 41


State 110

	atom -> '(' '/' ')' .                               (rule 40)

	identifier     reduce using rule 40
	string         reduce using rule 40
	number         reduce using rule 40
	let            reduce using rule 40
	then           reduce using rule 40
	else           reduce using rule 40
	'+'            reduce using rule 40
	'-'            reduce using rule 40
	'*'            reduce using rule 40
	'/'            reduce using rule 40
	'='            reduce using rule 40
	'!='           reduce using rule 40
	'<'            reduce using rule 40
	'<='           reduce using rule 40
	'>'            reduce using rule 40
	'>='           reduce using rule 40
	'&&'           reduce using rule 40
	'||'           reduce using rule 40
	'('            reduce using rule 40
	')'            reduce using rule 40
	'['            reduce using rule 40
	']'            reduce using rule 40
	','            reduce using rule 40
	'.'            reduce using rule 40
	%eof           reduce using rule 40


State 111

	atom -> '(' '*' ')' .                               (rule 39)

	identifier     reduce using rule 39
	string         reduce using rule 39
	number         reduce using rule 39
	let            reduce using rule 39
	then           reduce using rule 39
	else           reduce using rule 39
	'+'            reduce using rule 39
	'-'            reduce using rule 39
	'*'            reduce using rule 39
	'/'            reduce using rule 39
	'='            reduce using rule 39
	'!='           reduce using rule 39
	'<'            reduce using rule 39
	'<='           reduce using rule 39
	'>'            reduce using rule 39
	'>='           reduce using rule 39
	'&&'           reduce using rule 39
	'||'           reduce using rule 39
	'('            reduce using rule 39
	')'            reduce using rule 39
	'['            reduce using rule 39
	']'            reduce using rule 39
	','            reduce using rule 39
	'.'            reduce using rule 39
	%eof           reduce using rule 39


State 112

	atom -> '(' '-' ')' .                               (rule 38)

	identifier     reduce using rule 38
	string         reduce using rule 38
	number         reduce using rule 38
	let            reduce using rule 38
	then           reduce using rule 38
	else           reduce using rule 38
	'+'            reduce using rule 38
	'-'            reduce using rule 38
	'*'            reduce using rule 38
	'/'            reduce using rule 38
	'='            reduce using rule 38
	'!='           reduce using rule 38
	'<'            reduce using rule 38
	'<='           reduce using rule 38
	'>'            reduce using rule 38
	'>='           reduce using rule 38
	'&&'           reduce using rule 38
	'||'           reduce using rule 38
	'('            reduce using rule 38
	')'            reduce using rule 38
	'['            reduce using rule 38
	']'            reduce using rule 38
	','            reduce using rule 38
	'.'            reduce using rule 38
	%eof           reduce using rule 38


State 113

	atom -> '(' '+' ')' .                               (rule 37)

	identifier     reduce using rule 37
	string         reduce using rule 37
	number         reduce using rule 37
	let            reduce using rule 37
	then           reduce using rule 37
	else           reduce using rule 37
	'+'            reduce using rule 37
	'-'            reduce using rule 37
	'*'            reduce using rule 37
	'/'            reduce using rule 37
	'='            reduce using rule 37
	'!='           reduce using rule 37
	'<'            reduce using rule 37
	'<='           reduce using rule 37
	'>'            reduce using rule 37
	'>='           reduce using rule 37
	'&&'           reduce using rule 37
	'||'           reduce using rule 37
	'('            reduce using rule 37
	')'            reduce using rule 37
	'['            reduce using rule 37
	']'            reduce using rule 37
	','            reduce using rule 37
	'.'            reduce using rule 37
	%eof           reduce using rule 37


State 114

	atom -> '(' exp ')' .                               (rule 36)

	identifier     reduce using rule 36
	string         reduce using rule 36
	number         reduce using rule 36
	let            reduce using rule 36
	then           reduce using rule 36
	else           reduce using rule 36
	'+'            reduce using rule 36
	'-'            reduce using rule 36
	'*'            reduce using rule 36
	'/'            reduce using rule 36
	'='            reduce using rule 36
	'!='           reduce using rule 36
	'<'            reduce using rule 36
	'<='           reduce using rule 36
	'>'            reduce using rule 36
	'>='           reduce using rule 36
	'&&'           reduce using rule 36
	'||'           reduce using rule 36
	'('            reduce using rule 36
	')'            reduce using rule 36
	'['            reduce using rule 36
	']'            reduce using rule 36
	','            reduce using rule 36
	'.'            reduce using rule 36
	%eof           reduce using rule 36


State 115

	sepBy_rev__exp__','__ -> sepBy_rev__exp__','__ ',' . exp    (rule 71)

	identifier     shift, and enter state 2
	string         shift, and enter state 39
	number         shift, and enter state 40
	if             shift, and enter state 41
	'-'            shift, and enter state 42
	'('            shift, and enter state 43
	'['            shift, and enter state 44

	name           goto state 33
	exp            goto state 117
	expapp         goto state 35
	expcond        goto state 36
	projatom       goto state 37
	atom           goto state 38

State 116

	atom -> '[' sepBy__exp__','__ ']' .                 (rule 35)

	identifier     reduce using rule 35
	string         reduce using rule 35
	number         reduce using rule 35
	let            reduce using rule 35
	then           reduce using rule 35
	else           reduce using rule 35
	'+'            reduce using rule 35
	'-'            reduce using rule 35
	'*'            reduce using rule 35
	'/'            reduce using rule 35
	'='            reduce using rule 35
	'!='           reduce using rule 35
	'<'            reduce using rule 35
	'<='           reduce using rule 35
	'>'            reduce using rule 35
	'>='           reduce using rule 35
	'&&'           reduce using rule 35
	'||'           reduce using rule 35
	'('            reduce using rule 35
	')'            reduce using rule 35
	'['            reduce using rule 35
	']'            reduce using rule 35
	','            reduce using rule 35
	'.'            reduce using rule 35
	%eof           reduce using rule 35


State 117

	exp -> exp . '+' exp                                (rule 13)
	exp -> exp . '-' exp                                (rule 14)
	exp -> exp . '*' exp                                (rule 15)
	exp -> exp . '/' exp                                (rule 16)
	exp -> exp . '=' exp                                (rule 17)
	exp -> exp . '!=' exp                               (rule 18)
	exp -> exp . '<' exp                                (rule 19)
	exp -> exp . '<=' exp                               (rule 20)
	exp -> exp . '>' exp                                (rule 21)
	exp -> exp . '>=' exp                               (rule 22)
	exp -> exp . '&&' exp                               (rule 23)
	exp -> exp . '||' exp                               (rule 24)
	sepBy_rev__exp__','__ -> sepBy_rev__exp__','__ ',' exp .    (rule 71)

	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'/'            shift, and enter state 76
	'='            shift, and enter state 77
	'!='           shift, and enter state 78
	'<'            shift, and enter state 79
	'<='           shift, and enter state 80
	'>'            shift, and enter state 81
	'>='           shift, and enter state 82
	'&&'           shift, and enter state 83
	'||'           shift, and enter state 84
	']'            reduce using rule 71
	','            reduce using rule 71


State 118

	exp -> exp . '+' exp                                (rule 13)
	exp -> exp . '-' exp                                (rule 14)
	exp -> exp . '*' exp                                (rule 15)
	exp -> exp . '/' exp                                (rule 16)
	exp -> exp . '=' exp                                (rule 17)
	exp -> exp . '!=' exp                               (rule 18)
	exp -> exp . '<' exp                                (rule 19)
	exp -> exp . '<=' exp                               (rule 20)
	exp -> exp . '>' exp                                (rule 21)
	exp -> exp . '>=' exp                               (rule 22)
	exp -> exp . '&&' exp                               (rule 23)
	exp -> exp . '||' exp                               (rule 24)
	expcond -> if exp then exp .                        (rule 28)
	expcond -> if exp then exp . else exp               (rule 29)

	let            reduce using rule 28
	then           reduce using rule 28
	else           shift, and enter state 121
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'/'            shift, and enter state 76
	'='            shift, and enter state 77
	'!='           shift, and enter state 78
	'<'            shift, and enter state 79
	'<='           shift, and enter state 80
	'>'            shift, and enter state 81
	'>='           shift, and enter state 82
	'&&'           shift, and enter state 83
	'||'           shift, and enter state 84
	')'            reduce using rule 28
	']'            reduce using rule 28
	','            reduce using rule 28
	%eof           reduce using rule 28


State 119

	projection -> '.' '(' . exp ')'                     (rule 56)

	identifier     shift, and enter state 2
	string         shift, and enter state 39
	number         shift, and enter state 40
	if             shift, and enter state 41
	'-'            shift, and enter state 42
	'('            shift, and enter state 43
	'['            shift, and enter state 44

	name           goto state 33
	exp            goto state 120
	expapp         goto state 35
	expcond        goto state 36
	projatom       goto state 37
	atom           goto state 38

State 120

	exp -> exp . '+' exp                                (rule 13)
	exp -> exp . '-' exp                                (rule 14)
	exp -> exp . '*' exp                                (rule 15)
	exp -> exp . '/' exp                                (rule 16)
	exp -> exp . '=' exp                                (rule 17)
	exp -> exp . '!=' exp                               (rule 18)
	exp -> exp . '<' exp                                (rule 19)
	exp -> exp . '<=' exp                               (rule 20)
	exp -> exp . '>' exp                                (rule 21)
	exp -> exp . '>=' exp                               (rule 22)
	exp -> exp . '&&' exp                               (rule 23)
	exp -> exp . '||' exp                               (rule 24)
	projection -> '.' '(' exp . ')'                     (rule 56)

	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'/'            shift, and enter state 76
	'='            shift, and enter state 77
	'!='           shift, and enter state 78
	'<'            shift, and enter state 79
	'<='           shift, and enter state 80
	'>'            shift, and enter state 81
	'>='           shift, and enter state 82
	'&&'           shift, and enter state 83
	'||'           shift, and enter state 84
	')'            shift, and enter state 123


State 121

	expcond -> if exp then exp else . exp               (rule 29)

	identifier     shift, and enter state 2
	string         shift, and enter state 39
	number         shift, and enter state 40
	if             shift, and enter state 41
	'-'            shift, and enter state 42
	'('            shift, and enter state 43
	'['            shift, and enter state 44

	name           goto state 33
	exp            goto state 122
	expapp         goto state 35
	expcond        goto state 36
	projatom       goto state 37
	atom           goto state 38

State 122

	exp -> exp . '+' exp                                (rule 13)
	exp -> exp . '-' exp                                (rule 14)
	exp -> exp . '*' exp                                (rule 15)
	exp -> exp . '/' exp                                (rule 16)
	exp -> exp . '=' exp                                (rule 17)
	exp -> exp . '!=' exp                               (rule 18)
	exp -> exp . '<' exp                                (rule 19)
	exp -> exp . '<=' exp                               (rule 20)
	exp -> exp . '>' exp                                (rule 21)
	exp -> exp . '>=' exp                               (rule 22)
	exp -> exp . '&&' exp                               (rule 23)
	exp -> exp . '||' exp                               (rule 24)
	expcond -> if exp then exp else exp .               (rule 29)

	let            reduce using rule 29
	then           reduce using rule 29
	else           reduce using rule 29
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'/'            shift, and enter state 76
	'='            shift, and enter state 77
	'!='           shift, and enter state 78
	'<'            shift, and enter state 79
			(reduce using rule 29)

	'<='           shift, and enter state 80
	'>'            shift, and enter state 81
	'>='           shift, and enter state 82
	'&&'           shift, and enter state 83
	'||'           shift, and enter state 84
	')'            reduce using rule 29
	']'            reduce using rule 29
	','            reduce using rule 29
	%eof           reduce using rule 29


State 123

	projection -> '.' '(' exp ')' .                     (rule 56)

	identifier     reduce using rule 56
	string         reduce using rule 56
	number         reduce using rule 56
	let            reduce using rule 56
	then           reduce using rule 56
	else           reduce using rule 56
	'+'            reduce using rule 56
	'-'            reduce using rule 56
	'*'            reduce using rule 56
	'/'            reduce using rule 56
	'='            reduce using rule 56
	'!='           reduce using rule 56
	'<'            reduce using rule 56
	'<='           reduce using rule 56
	'>'            reduce using rule 56
	'>='           reduce using rule 56
	'&&'           reduce using rule 56
	'||'           reduce using rule 56
	'('            reduce using rule 56
	')'            reduce using rule 56
	'['            reduce using rule 56
	']'            reduce using rule 56
	','            reduce using rule 56
	'.'            reduce using rule 56
	%eof           reduce using rule 56


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 74
Number of terminals: 30
Number of non-terminals: 25
Number of states: 124
